name: Build and Release Rust App (Cross-Compile)

on:
  push:
    branches:
      - build-test
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target_os }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target_os: linux
            output_artifact_suffix: linux-amd64
            binary_name_suffix: ""
            archive_format: tar.gz
          - target_os: windows
            rust_target: x86_64-pc-windows-gnu
            output_artifact_suffix: windows-amd64
            binary_name_suffix: ".exe"
            archive_format: zip
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy
          toolchain: stable
          target: ${{ matrix.rust_target }}

      - name: Install MinGW-w64 (for Windows cross-compile)
        if: matrix.target_os == 'windows'
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64

      - name: Install jq (for parsing Cargo.toml metadata)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get and Sanitize Crate Name
        id: get_crate_name
        run: |
          CRATE_NAME_RAW=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[] | select(.manifest_path | contains("Cargo.toml")) | .name')
          echo "Raw CRATE_NAME from jq: '${CRATE_NAME_RAW}'"
          
          CRATE_NAME_SANITIZED=$(echo "${CRATE_NAME_RAW}" | sed 's/[^a-zA-Z0-9_-]//g')
          echo "Sanitized CRATE_NAME: '${CRATE_NAME_SANITIZED}'"
          
          if [[ -z "${CRATE_NAME_SANITIZED}" ]]; then
            echo "::error::CRATE_NAME is empty after sanitization. Original from jq: '${CRATE_NAME_RAW}'"
            exit 1
          fi
          
          echo "CRATE_NAME=${CRATE_NAME_SANITIZED}" >> $GITHUB_ENV
          echo "crate_name_output=${CRATE_NAME_SANITIZED}" >> $GITHUB_OUTPUT

      - name: Build for Linux (native)
        if: matrix.target_os == 'linux'
        run: cargo build --release
        env:
          RUSTFLAGS: -C strip=symbols

      - name: Build for Windows (cross-compile)
        if: matrix.target_os == 'windows'
        run: cargo build --release --target ${{ matrix.rust_target }}
        env:
          RUSTFLAGS: -C strip=symbols
          CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER: x86_64-w64-mingw32-gcc

      - name: Determine Binary Path and Archive Name
        id: binary_info
        shell: bash
        run: |
          echo "DEBUG: CRATE_NAME from env: '${CRATE_NAME}'"
          echo "DEBUG: github.ref_name: '${{ github.ref_name }}'"
          echo "DEBUG: matrix.output_artifact_suffix: '${{ matrix.output_artifact_suffix }}'"
          echo "DEBUG: matrix.target_os: '${{ matrix.target_os }}'"
          echo "DEBUG: matrix.binary_name_suffix (raw from matrix context): '${{ matrix.binary_name_suffix }}'"
          echo "DEBUG: matrix.rust_target (raw from matrix context): '${{ matrix.rust_target }}'"

          ARCHIVE_BASENAME="${CRATE_NAME}-${{ github.ref_name }}-${{ matrix.output_artifact_suffix }}"
          echo "Archive Basename: ${ARCHIVE_BASENAME}"

          BINARY_PATH="" 

          if [[ "${{ matrix.target_os }}" == "linux" ]]; then
            BINARY_PATH="target/release/${CRATE_NAME}${{ matrix.binary_name_suffix }}"
          elif [[ "${{ matrix.target_os }}" == "windows" ]]; then
            BINARY_PATH="target/${{ matrix.rust_target }}/release/${CRATE_NAME}${{ matrix.binary_name_suffix }}"
          else
            echo "::error::Unknown matrix.target_os: ${{ matrix.target_os }}"
            exit 1
          fi

          echo "Determined Binary Path: '${BINARY_PATH}'"
          
          if [[ -z "${BINARY_PATH}" ]]; then
            echo "::error::BINARY_PATH is empty. This should not happen."
            exit 1
          fi
          if [[ ! -f "${BINARY_PATH}" && "${{ matrix.target_os }}" == "windows" && -f "target/${{ matrix.rust_target }}/release/${CRATE_NAME}.exe" ]]; then
             echo "::warning::Expected BINARY_PATH not found, but found .exe directly. Forcing .exe suffix."
             BINARY_PATH="target/${{ matrix.rust_target }}/release/${CRATE_NAME}.exe"
          elif [[ ! -f "${BINARY_PATH}" ]]; then
             echo "::error::Binary file not found at expected path: ${BINARY_PATH}"
             echo "Listing target directory contents:"
             ls -R target/
             exit 1
          fi

          echo "binary_path_output=${BINARY_PATH}" >> $GITHUB_OUTPUT
          echo "archive_basename_output=${ARCHIVE_BASENAME}" >> $GITHUB_OUTPUT

      - name: Archive binary and extra files
        shell: bash
        run: |
          BINARY_PATH="${{ steps.binary_info.outputs.binary_path_output }}"
          ARCHIVE_BASENAME="${{ steps.binary_info.outputs.archive_basename_output }}"
          
          STAGING_DIR="staging_dir_for_archive" 

          mkdir -p "${STAGING_DIR}"
          
          COMPILED_BINARY_FILENAME="${CRATE_NAME}${{ matrix.binary_name_suffix }}"
          
          echo "Copying '${BINARY_PATH}' to '${STAGING_DIR}/${COMPILED_BINARY_FILENAME}'"
          cp "${BINARY_PATH}" "${STAGING_DIR}/${COMPILED_BINARY_FILENAME}"

          cp README.md LICENSE "${STAGING_DIR}/" 2>/dev/null || true

          FINAL_ARCHIVE_NAME=""
          if [[ "${{ matrix.archive_format }}" == "tar.gz" ]]; then
            FINAL_ARCHIVE_NAME="${ARCHIVE_BASENAME}.tar.gz"
            tar -czvf "${FINAL_ARCHIVE_NAME}" -C "${STAGING_DIR}" .
          elif [[ "${{ matrix.archive_format }}" == "zip" ]]; then
            FINAL_ARCHIVE_NAME="${ARCHIVE_BASENAME}.zip"
            if ! command -v zip &> /dev/null; then sudo apt-get update && sudo apt-get install -y zip; fi
            (cd "${STAGING_DIR}" && zip -r "../${FINAL_ARCHIVE_NAME}" .)
          fi

          echo "Created archive: ${FINAL_ARCHIVE_NAME}"
          ls -lh "${FINAL_ARCHIVE_NAME}"
          echo "ARCHIVE_FILE_PATH=${FINAL_ARCHIVE_NAME}" >> $GITHUB_ENV

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target_os }}-build-${{ env.CRATE_NAME }}-${{ github.ref_name }}
          path: ${{ env.ARCHIVE_FILE_PATH }}
          if-no-files-found: error

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq (for parsing Cargo.toml metadata)
        if: env.CRATE_NAME_RELEASE == ''
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Get Crate Name for Release
        id: get_crate_name_release
        run: |
          if [[ -n "${{ needs.build.outputs.crate_name_output }}" ]]; then
             CRATE_NAME="${{ needs.build.outputs.crate_name_output }}"
          else
             CRATE_NAME=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[] | select(.manifest_path | contains("Cargo.toml")) | .name' | sed 's/[^a-zA-Z0-9_-]//g')
          fi
          echo "Release Crate Name: '${CRATE_NAME}'"
          echo "CRATE_NAME_RELEASE=${CRATE_NAME}" >> $GITHUB_ENV
          echo "crate_name_output=${CRATE_NAME}" >> $GITHUB_OUTPUT

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: List downloaded files (for debugging)
        run: |
          echo "Listing downloaded artifacts in release-assets/:"
          ls -R release-assets
          echo "Preparing file list for release..."
          find release-assets -type f -print0 | xargs -0 -I {} echo {}

      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ env.CRATE_NAME_RELEASE }} ${{ github.ref_name }}
          body: |
            Automated release of ${{ env.CRATE_NAME_RELEASE }} version ${{ github.ref_name }}.

            Built from commit: ${{ github.sha }}
            Commit message: ${{ github.event.head_commit.message }}

            See attached assets for Linux and Windows.
          files: |
            release-assets/*/*
